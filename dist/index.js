var A=Object.defineProperty;var v=Object.getOwnPropertySymbols;var D=Object.prototype.hasOwnProperty,B=Object.prototype.propertyIsEnumerable;var w=(e,t,r)=>t in e?A(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,$=(e,t)=>{for(var r in t||(t={}))D.call(t,r)&&w(e,r,t[r]);if(v)for(var r of v(t))B.call(t,r)&&w(e,r,t[r]);return e};var T={RELEASE_BUMP_VERSION:"3.0.0-alpha.26"},l={env:T};import{readFileSync as N}from"fs";import{readdir as _,stat as q}from"fs/promises";import{join as U}from"path";function F(e,t){return e.filter(r=>!t.some(i=>r.includes(i)))}function k(e){if(typeof e=="string"){if(/https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()!@:%_+.~#?&/=]*)/.test(e))return e;if(/^[-a-zA-Z0-9()!@:%_+~#?&=]+\/[-a-zA-Z0-9()!@:%_+~#?&=]+$/.test(e))return`https://github.com/${e}`}else return typeof e.url>"u"?"":k(e.url.replace(/(^git\+|\.git$)/,""));return""}async function C(e,t){var y,g;let{date:r,isChangelog:i,prefix:s,quiet:o,release:a,repository:n}=t;if(!/^\d+\.\d+\.\d+$/.test(a))return e;let p=(g=(y=/\d+\.\d+\.\d+/.exec(a))==null?void 0:y[0])!=null?g:a;if(i===!1)return e.replace(/@([Ss]ince|[Vv]ersion)(:?\s+)unreleased/g,`@$1$2${p}`);let f=n.includes("bitbucket.org")?"bitbucket":"github",m=`${n}/${f==="bitbucket"?"commits":"releases"}/tag/${s?"v":""}${p}`,c=`## [${s?"v":""}${p}]`+(n!==""?`(${m})`:"")+(r?` - ${r}`:"");if(e.includes(c))return o!==!0&&console.info("changelog is already formatted"),e;let R=`(${n}/${f==="bitbucket"?"branches/":""}compare/HEAD..${s?"v":""}${p})`,h=`## [Unreleased]${n?R:""}

### `+["Added","Changed","Deprecated","Removed","Fixed","Security"].join(`

### `);return e.replace(/## \[Unreleased\](\(.*\))?/,c).replace(/### (Added|Changed|Deprecated|Removed|Fixed|Security)\n\n/g,"").replace(/### (Added|Changed|Deprecated|Removed|Fixed|Security)\n$/g,"").replace(/\n\n$/g,`
`).replace(c,h+`

`+c)}async function O(e){let{directoriesToIgnore:t,failOnError:r,filesPath:i,paths:s}=e;if(t.some(n=>i.includes(n)))return s!=null?s:[];let o=[];try{o=await _(i)}catch(n){if(n.code!=="ENOENT"){if(r)throw l.exitCode=1,n;console.warn(`could not read files in ${i}`)}o=[]}let a=(await Promise.all(o.map(async n=>(await q(`${i}/${n}`)).isDirectory()===!0?await O({directoriesToIgnore:t,failOnError:r,filesPath:`${i}/${n}`,paths:s}):U(`${i}/${n}`)))).flat();return[...s,...a]}function S(e){var o;let t={repository:"",version:"0.0.0"};try{t=JSON.parse(N("package.json","utf8"))}catch(a){l.env.NODE_ENV!=="test"&&e.quiet!==!0&&console.warn("could not read package.json")}let r=[".git",".github","coverage","dist","node_modules","tests/fixtures"],i={changelogPath:"CHANGELOG.md",date:(o=new Date().toISOString().split("T"))==null?void 0:o[0],dryRun:!1,failOnError:!1,filesPath:".",ignore:r,prefix:!1,quiet:l.env.NODE_ENV==="test"||!1,release:t.version,repository:k(t.repository)};return $($({},i),e)}import{readFile as I,writeFile as j}from"fs/promises";async function W(e){let{changelogPath:t,date:r,dryRun:i,failOnError:s,filesPath:o,ignore:a,prefix:n,quiet:d,release:p,repository:f}=S(e),m=l.env.NODE_ENV==="test"||i===!0,c=a,h=await O({directoriesToIgnore:c,failOnError:s,filesPath:o,paths:[t]}),y=F(h,c),g=[];return await Promise.all(y.map(async u=>{let b="";try{b=await I(u,"utf8")}catch(x){if(s)throw l.exitCode=1,x;d!==!0&&console.warn(`could not read ${u}`)}let P=await C(b,{date:r,isChangelog:t===u,prefix:n,quiet:d,release:p,repository:f});if(b!==P&&(g.push(u),m!==!0))try{await j(u,P,"utf8")}catch(x){if(s)throw l.exitCode=1,x;d!==!0&&console.warn(`could not write ${u}`)}})),g.length>0&&d!==!0&&console.info((m?"would have ":"")+`bumped ${g.join(", ")}`),i?[]:g}export{W as releaseBump};
