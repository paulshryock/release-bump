var L=Object.defineProperty;var w=Object.getOwnPropertySymbols;var _=Object.prototype.hasOwnProperty,q=Object.prototype.propertyIsEnumerable;var E=(e,t,r)=>t in e?L(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,O=(e,t)=>{for(var r in t||(t={}))_.call(t,r)&&E(e,r,t[r]);if(w)for(var r of w(t))q.call(t,r)&&E(e,r,t[r]);return e};var U="3.0.0-alpha.36",y={RELEASE_BUMP_VERSION:U};import{Console as I}from"console";import{createWriteStream as F,readFileSync as N}from"fs";import{readdir as j,stat as V}from"fs/promises";import{join as z}from"path";function S(e,t){return e.filter(r=>!t.some(i=>r.includes(i)))}function A(e){let t=[];return e.forEach(r=>{Array.isArray(r)?t.push(...A(r)):t.push(r)}),t}function C(e){if(typeof e=="string"){if(/https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()!@:%_+.~#?&/=]*)/.test(e))return e;if(/^[-a-zA-Z0-9()!@:%_+~#?&=]+\/[-a-zA-Z0-9()!@:%_+~#?&=]+$/.test(e))return`https://github.com/${e}`}else return typeof(e==null?void 0:e.url)>"u"?"":C(e.url.replace(/(^git\+|\.git$)/,""));return""}async function k(e,t){var x,f;let{date:r,isChangelog:i,prefix:n,release:a,repository:s}=t;if(!/^\d+\.\d+\.\d+$/.test(a))return e;let l=(f=(x=/\d+\.\d+\.\d+/.exec(a))==null?void 0:x[0])!=null?f:a;if(i===!1)return e.replace(/@([Ss]ince|[Vv]ersion)(:?\s+)unreleased/g,`@$1$2${l}`);let c=s.includes("bitbucket.org")?"bitbucket":"github",b=`${s}/${c==="bitbucket"?"commits":"releases"}/tag/${n?"v":""}${l}`,g=`## [${n?"v":""}${l}]`+(s!==""?`(${b})`:"")+(r?` - ${r}`:"");if(e.includes(g))return e;let u=`(${s}/${c==="bitbucket"?"branches/":""}compare/HEAD..${n?"v":""}${l})`,d=`## [Unreleased]${s?u:""}

### `+["Added","Changed","Deprecated","Removed","Fixed","Security"].join(`

### `);return e.replace(/## \[Unreleased\](\(.*\))?/,g).replace(/### (Added|Changed|Deprecated|Removed|Fixed|Security)\n\n/g,"").replace(/### (Added|Changed|Deprecated|Removed|Fixed|Security)\n$/g,"").replace(/\n\n$/g,`
`).replace(g,d+`

`+g)}async function P(e){let{directoriesToIgnore:t,failOnError:r,filesPath:i,paths:n}=e;if(t.some(o=>i.includes(o)))return n!=null?n:[];let a=[];try{a=await j(i)}catch(o){if(r)throw process.exitCode=1,o;a=[]}let s=await Promise.all(a.map(async o=>(await V(`${i}/${o}`)).isDirectory()===!0?await P({directoriesToIgnore:t,failOnError:r,filesPath:`${i}/${o}`,paths:n}):z(`${i}/${o}`)));return[...new Set(A([...n,...s]))]}function D({quiet:e}){return e===!0?new I({stdout:F("/dev/null"),stderr:F("/dev/null")}):console}function B(e){var s;let t,r=y.NODE_ENV==="test"||!1;try{t=JSON.parse(N("package.json","utf8"))}catch(o){t={repository:"",version:"0.0.0"}}let i=[".git",".github","coverage","dist","node_modules","tests/fixtures"],n={changelogPath:"CHANGELOG.md",date:(s=new Date().toISOString().split("T"))==null?void 0:s[0],dryRun:!1,failOnError:!1,filesPath:".",ignore:i,prefix:!1,quiet:r,release:t.version,repository:C(t.repository)};return O(O({},n),e)}import{readFile as Z,writeFile as G}from"fs/promises";async function ne(e){let{changelogPath:t,date:r,dryRun:i,failOnError:n,filesPath:a,ignore:s,prefix:o,quiet:l,release:c,repository:b}=B(e),g=D({quiet:l}),u=i===!0,d=s,f=await P({directoriesToIgnore:d,failOnError:n,filesPath:a,paths:[t]}),T=S(f,d),m=[];return await Promise.all(T.map(async p=>{let $="";try{$=await Z(p,"utf8")}catch(h){if(n)throw process.exitCode=1,h;g.warn(`could not read ${p}`)}let R=await k($,{date:r,isChangelog:t===p,prefix:o,quiet:l,release:c,repository:b});if($!==R&&(m.push(p),u!==!0))try{y.NODE_ENV!=="test"&&await G(p,R,"utf8")}catch(h){if(n)throw process.exitCode=1,h;g.warn(`could not write ${p}`,h)}})),m.length>0&&g.info((u?"would have ":"")+`bumped ${m.join(", ")}`),i?[]:m}export{ne as releaseBump};
