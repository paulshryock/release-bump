var y=Object.defineProperty;var U=Object.getOwnPropertyDescriptor;var I=Object.getOwnPropertyNames,F=Object.getOwnPropertySymbols;var A=Object.prototype.hasOwnProperty,j=Object.prototype.propertyIsEnumerable;var k=(e,t,r)=>t in e?y(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,R=(e,t)=>{for(var r in t||(t={}))A.call(t,r)&&k(e,r,t[r]);if(F)for(var r of F(t))j.call(t,r)&&k(e,r,t[r]);return e};var L=(e,t)=>{for(var r in t)y(e,r,{get:t[r],enumerable:!0})},V=(e,t,r,i)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of I(t))!A.call(e,n)&&n!==r&&y(e,n,{get:()=>t[n],enumerable:!(i=U(t,n))||i.enumerable});return e};var z=e=>V(y({},"__esModule",{value:!0}),e);var H={};L(H,{releaseBump:()=>G});module.exports=z(H);var Z="3.0.0-alpha.33",u={RELEASE_BUMP_VERSION:Z};var C=require("fs"),b=require("fs/promises"),D=require("path");function B(e,t){return e.filter(r=>!t.some(i=>r.includes(i)))}function T(e){let t=[];return e.forEach(r=>{Array.isArray(r)?t.push(...T(r)):t.push(r)}),t}function N(e){if(typeof e=="string"){if(/https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()!@:%_+.~#?&/=]*)/.test(e))return e;if(/^[-a-zA-Z0-9()!@:%_+~#?&=]+\/[-a-zA-Z0-9()!@:%_+~#?&=]+$/.test(e))return`https://github.com/${e}`}else return typeof(e==null?void 0:e.url)>"u"?"":N(e.url.replace(/(^git\+|\.git$)/,""));return""}async function _(e,t){var h,p;let{date:r,isChangelog:i,prefix:n,quiet:o,release:a,repository:s}=t;if(!/^\d+\.\d+\.\d+$/.test(a))return e;let l=(p=(h=/\d+\.\d+\.\d+/.exec(a))==null?void 0:h[0])!=null?p:a;if(i===!1)return e.replace(/@([Ss]ince|[Vv]ersion)(:?\s+)unreleased/g,`@$1$2${l}`);let f=s.includes("bitbucket.org")?"bitbucket":"github",m=`${s}/${f==="bitbucket"?"commits":"releases"}/tag/${n?"v":""}${l}`,c=`## [${n?"v":""}${l}]`+(s!==""?`(${m})`:"")+(r?` - ${r}`:"");if(e.includes(c))return o!==!0&&console.info("changelog is already formatted"),e;let w=`(${s}/${f==="bitbucket"?"branches/":""}compare/HEAD..${n?"v":""}${l})`,$=`## [Unreleased]${s?w:""}

### `+["Added","Changed","Deprecated","Removed","Fixed","Security"].join(`

### `);return e.replace(/## \[Unreleased\](\(.*\))?/,c).replace(/### (Added|Changed|Deprecated|Removed|Fixed|Security)\n\n/g,"").replace(/### (Added|Changed|Deprecated|Removed|Fixed|Security)\n$/g,"").replace(/\n\n$/g,`
`).replace(c,$+`

`+c)}async function E(e){let{directoriesToIgnore:t,failOnError:r,filesPath:i,paths:n}=e;if(t.some(s=>i.includes(s)))return n!=null?n:[];let o=[];try{o=await(0,b.readdir)(i)}catch(s){if(s.code!=="ENOENT"){if(r)throw process.exitCode=1,s;console.warn(`could not read files in ${i}`)}o=[]}let a=await Promise.all(o.map(async s=>(await(0,b.stat)(`${i}/${s}`)).isDirectory()===!0?await E({directoriesToIgnore:t,failOnError:r,filesPath:`${i}/${s}`,paths:n}):(0,D.join)(`${i}/${s}`)));return[...new Set(T([...n,...a]))]}function q(e){var o;let t={repository:"",version:"0.0.0"};try{t=JSON.parse((0,C.readFileSync)("package.json","utf8"))}catch(a){u.NODE_ENV!=="test"&&e.quiet!==!0&&console.warn("could not read package.json")}let r=[".git",".github","coverage","dist","node_modules","tests/fixtures"],i={changelogPath:"CHANGELOG.md",date:(o=new Date().toISOString().split("T"))==null?void 0:o[0],dryRun:!1,failOnError:!1,filesPath:".",ignore:r,prefix:!1,quiet:u.NODE_ENV==="test"||!1,release:t.version,repository:N(t.repository)};return R(R({},i),e)}var x=require("fs/promises");async function G(e){let{changelogPath:t,date:r,dryRun:i,failOnError:n,filesPath:o,ignore:a,prefix:s,quiet:g,release:l,repository:f}=q(e),m=u.NODE_ENV==="test"||i===!0,c=a,$=await E({directoriesToIgnore:c,failOnError:n,filesPath:o,paths:[t]}),h=B($,c),p=[];return await Promise.all(h.map(async d=>{let O="";try{O=await(0,x.readFile)(d,"utf8")}catch(P){if(n)throw process.exitCode=1,P;g!==!0&&console.warn(`could not read ${d}`)}let v=await _(O,{date:r,isChangelog:t===d,prefix:s,quiet:g,release:l,repository:f});if(O!==v&&(p.push(d),m!==!0))try{await(0,x.writeFile)(d,v,"utf8")}catch(P){if(n)throw process.exitCode=1,P;g!==!0&&console.warn(`could not write ${d}`)}})),p.length>0&&g!==!0&&console.info((m?"would have ":"")+`bumped ${p.join(", ")}`),i?[]:p}0&&(module.exports={releaseBump});
