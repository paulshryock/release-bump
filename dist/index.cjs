var b=Object.defineProperty;var j=Object.getOwnPropertyDescriptor;var N=Object.getOwnPropertyNames,S=Object.getOwnPropertySymbols;var C=Object.prototype.hasOwnProperty,z=Object.prototype.propertyIsEnumerable;var A=(e,t,r)=>t in e?b(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,R=(e,t)=>{for(var r in t||(t={}))C.call(t,r)&&A(e,r,t[r]);if(S)for(var r of S(t))z.call(t,r)&&A(e,r,t[r]);return e};var V=(e,t)=>{for(var r in t)b(e,r,{get:t[r],enumerable:!0})},Z=(e,t,r,i)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of N(t))!C.call(e,n)&&n!==r&&b(e,n,{get:()=>t[n],enumerable:!(i=j(t,n))||i.enumerable});return e};var G=e=>Z(b({},"__esModule",{value:!0}),e);var J={};V(J,{releaseBump:()=>M});module.exports=G(J);var H="3.0.0-alpha.38",w={RELEASE_BUMP_VERSION:H};var B=require("console"),d=require("fs"),x=require("fs/promises"),D=require("path");function T(e,t){return e.filter(r=>!t.some(i=>r.includes(i)))}function L(e){let t=[];return e.forEach(r=>{Array.isArray(r)?t.push(...L(r)):t.push(r)}),t}function q(e){if(typeof e=="string"){if(/https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()!@:%_+.~#?&/=]*)/.test(e))return e;if(/^[-a-zA-Z0-9()!@:%_+~#?&=]+\/[-a-zA-Z0-9()!@:%_+~#?&=]+$/.test(e))return`https://github.com/${e}`}else return typeof(e==null?void 0:e.url)>"u"?"":q(e.url.replace(/(^git\+|\.git$)/,""));return""}async function _(e,t){var f,m;let{date:r,isChangelog:i,prefix:n,release:a,repository:s}=t;if(!/^\d+\.\d+\.\d+$/.test(a))return e;let l=(m=(f=/\d+\.\d+\.\d+/.exec(a))==null?void 0:f[0])!=null?m:a;if(i===!1)return e.replace(/@([Ss]ince|[Vv]ersion)(:?\s+)unreleased/g,`@$1$2${l}`);let c=s.includes("bitbucket.org")?"bitbucket":"github",O=`${s}/${c==="bitbucket"?"commits":"releases"}/tag/${n?"v":""}${l}`,g=`## [${n?"v":""}${l}]`+(s!==""?`(${O})`:"")+(r?` - ${r}`:"");if(e.includes(g))return e;let u=`(${s}/${c==="bitbucket"?"branches/":""}compare/HEAD..${n?"v":""}${l})`,v=`## [Unreleased]${s?u:""}

### `+["Added","Changed","Deprecated","Removed","Fixed","Security"].join(`

### `);return e.replace(/## \[Unreleased\](\(.*\))?/,g).replace(/### (Added|Changed|Deprecated|Removed|Fixed|Security)\n\n/g,"").replace(/### (Added|Changed|Deprecated|Removed|Fixed|Security)\n$/g,"").replace(/\n\n$/g,`
`).replace(g,v+`

`+g)}async function E(e){let{directoriesToIgnore:t,failOnError:r,filesPath:i,paths:n}=e;if(t.some(o=>i.includes(o)))return n!=null?n:[];let a=[];try{a=await(0,x.readdir)(i)}catch(o){if(r)throw process.exitCode=1,o;a=[]}let s=await Promise.all(a.map(async o=>(await(0,x.stat)(`${i}/${o}`)).isDirectory()===!0?await E({directoriesToIgnore:t,failOnError:r,filesPath:`${i}/${o}`,paths:n}):(0,D.join)(`${i}/${o}`)));return[...new Set(L([...n,...s]))]}function U({quiet:e}){return e===!0?new B.Console({stdout:(0,d.createWriteStream)("/dev/null"),stderr:(0,d.createWriteStream)("/dev/null")}):console}function I(e){var s;let t,r=w.NODE_ENV==="test"||!1;try{t=JSON.parse((0,d.readFileSync)("package.json","utf8"))}catch(o){t={repository:"",version:"0.0.0"}}let i=[".git",".github","coverage","dist","node_modules","tests/fixtures"],n={changelogPath:"CHANGELOG.md",date:(s=new Date().toISOString().split("T"))==null?void 0:s[0],dryRun:!1,failOnError:!1,filesPath:".",ignore:i,prefix:!1,quiet:r,release:t.version,repository:q(t.repository)};return R(R({},n),e)}var $=require("fs/promises");async function M(e){let{changelogPath:t,date:r,dryRun:i,failOnError:n,filesPath:a,ignore:s,prefix:o,quiet:l,release:c,repository:O}=I(e),g=U({quiet:l}),u=s,f=await E({directoriesToIgnore:u,failOnError:n,filesPath:a,paths:[t]}),m=T(f,u),h=[];return await Promise.all(m.map(async p=>{let P="";try{P=await(0,$.readFile)(p,"utf8")}catch(y){if(n)throw process.exitCode=1,y;g.warn(`could not read ${p}`)}let F=await _(P,{date:r,isChangelog:t===p,prefix:o,quiet:l,release:c,repository:O});if(P!==F&&(h.push(p),!i))try{await(0,$.writeFile)(p,F,"utf8")}catch(y){if(n)throw process.exitCode=1,y;g.warn(`could not write ${p}`,y)}})),h.length>0&&g.info((i?"would have ":"")+`bumped ${h.join(", ")}`),h}0&&(module.exports={releaseBump});
